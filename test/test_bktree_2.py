import unittest

import cbktree as hamDb


def hamming(a, b):
    tot = 0

    x = (a ^ b)
    while x > 0:
        tot += x & 1
        x >>= 1
    return tot


def b2i(binaryStringIn):
    if len(binaryStringIn) != 64:
        print("ERROR: Passed string not 64 characters. String length = %s" % len(binaryStringIn))
        print("ERROR: String value '%s'" % binaryStringIn)
        raise ValueError("Input strings must be 64 chars long!")

    return hamDb.explicitSignCast(int(binaryStringIn, 2))


# Node ID numbers are derived from the list ordering.
# This will generate a single node with 64 children.
TEST_DATA_FLAT = [
    "0000000000000000000000000000000000000000000000000000000000000000",  # 0
    "0000000000000000000000000000000000000000000000000000000000000001",  # 1
    "0000000000000000000000000000000000000000000000000000000000000011",  # 2
    "0000000000000000000000000000000000000000000000000000000000000111",  # 3
    "0000000000000000000000000000000000000000000000000000000000001111",  # 4
    "0000000000000000000000000000000000000000000000000000000000011111",  # 5
    "0000000000000000000000000000000000000000000000000000000000111111",  # 6
    "0000000000000000000000000000000000000000000000000000000001111111",  # 7
    "0000000000000000000000000000000000000000000000000000000011111111",  # 8
    "0000000000000000000000000000000000000000000000000000000111111111",  # 9
    "0000000000000000000000000000000000000000000000000000001111111111",  # 10
    "0000000000000000000000000000000000000000000000000000011111111111",  # 11
    "0000000000000000000000000000000000000000000000000000111111111111",  # 12
    "0000000000000000000000000000000000000000000000000001111111111111",  # 13
    "0000000000000000000000000000000000000000000000000011111111111111",  # 14
    "0000000000000000000000000000000000000000000000000111111111111111",  # 15
    "0000000000000000000000000000000000000000000000001111111111111111",  # 16
    "0000000000000000000000000000000000000000000000011111111111111111",  # 17
    "0000000000000000000000000000000000000000000000111111111111111111",  # 18
    "0000000000000000000000000000000000000000000001111111111111111111",  # 19
    "0000000000000000000000000000000000000000000011111111111111111111",  # 20
    "0000000000000000000000000000000000000000000111111111111111111111",  # 21
    "0000000000000000000000000000000000000000001111111111111111111111",  # 22
    "0000000000000000000000000000000000000000011111111111111111111111",  # 23
    "0000000000000000000000000000000000000000111111111111111111111111",  # 24
    "0000000000000000000000000000000000000001111111111111111111111111",  # 25
    "0000000000000000000000000000000000000011111111111111111111111111",  # 26
    "0000000000000000000000000000000000000111111111111111111111111111",  # 27
    "0000000000000000000000000000000000001111111111111111111111111111",  # 28
    "0000000000000000000000000000000000011111111111111111111111111111",
    "0000000000000000000000000000000000111111111111111111111111111111",
    "0000000000000000000000000000000001111111111111111111111111111111",
    "0000000000000000000000000000000011111111111111111111111111111111",
    "0000000000000000000000000000000111111111111111111111111111111111",
    "0000000000000000000000000000001111111111111111111111111111111111",
    "0000000000000000000000000000011111111111111111111111111111111111",
    "0000000000000000000000000000111111111111111111111111111111111111",
    "0000000000000000000000000001111111111111111111111111111111111111",
    "0000000000000000000000000011111111111111111111111111111111111111",
    "0000000000000000000000000111111111111111111111111111111111111111",
    "0000000000000000000000001111111111111111111111111111111111111111",
    "0000000000000000000000011111111111111111111111111111111111111111",
    "0000000000000000000000111111111111111111111111111111111111111111",
    "0000000000000000000001111111111111111111111111111111111111111111",
    "0000000000000000000011111111111111111111111111111111111111111111",
    "0000000000000000000111111111111111111111111111111111111111111111",
    "0000000000000000001111111111111111111111111111111111111111111111",
    "0000000000000000011111111111111111111111111111111111111111111111",
    "0000000000000000111111111111111111111111111111111111111111111111",
    "0000000000000001111111111111111111111111111111111111111111111111",
    "0000000000000011111111111111111111111111111111111111111111111111",
    "0000000000000111111111111111111111111111111111111111111111111111",
    "0000000000001111111111111111111111111111111111111111111111111111",
    "0000000000011111111111111111111111111111111111111111111111111111",
    "0000000000111111111111111111111111111111111111111111111111111111",
    "0000000001111111111111111111111111111111111111111111111111111111",
    "0000000011111111111111111111111111111111111111111111111111111111",
    "0000000111111111111111111111111111111111111111111111111111111111",
    "0000001111111111111111111111111111111111111111111111111111111111",
    "0000011111111111111111111111111111111111111111111111111111111111",
    "0000111111111111111111111111111111111111111111111111111111111111",
    "0001111111111111111111111111111111111111111111111111111111111111",
    "0011111111111111111111111111111111111111111111111111111111111111",
    "0111111111111111111111111111111111111111111111111111111111111111",
    "1111111111111111111111111111111111111111111111111111111111111111",
]

# THis will generate a single, 64-node long branch, with no forks.
TEST_DATA_Narrow = [
    "0000000000000000000000000000000000000000000000000000000000000000",  # 0
    "0000000000000000000000000000000000000000000000000000000000000001",  # 1
    "0000000000000000000000000000000000000000000000000000000000000010",  # 2
    "0000000000000000000000000000000000000000000000000000000000000100",  # 3
    "0000000000000000000000000000000000000000000000000000000000001000",  # 4
    "0000000000000000000000000000000000000000000000000000000000010000",  # 5
    "0000000000000000000000000000000000000000000000000000000000100000",  # 6
    "0000000000000000000000000000000000000000000000000000000001000000",  # 7
    "0000000000000000000000000000000000000000000000000000000010000000",  # 8
    "0000000000000000000000000000000000000000000000000000000100000000",  # 9
    "0000000000000000000000000000000000000000000000000000001000000000",  # 10
    "0000000000000000000000000000000000000000000000000000010000000000",  # 11
    "0000000000000000000000000000000000000000000000000000100000000000",  # 12
    "0000000000000000000000000000000000000000000000000001000000000000",  # 13
    "0000000000000000000000000000000000000000000000000010000000000000",  # 14
    "0000000000000000000000000000000000000000000000000100000000000000",  # 15
    "0000000000000000000000000000000000000000000000001000000000000000",  # 16
    "0000000000000000000000000000000000000000000000010000000000000000",  # 17
    "0000000000000000000000000000000000000000000000100000000000000000",  # 18
    "0000000000000000000000000000000000000000000001000000000000000000",  # 19
    "0000000000000000000000000000000000000000000010000000000000000000",  # 20
    "0000000000000000000000000000000000000000000100000000000000000000",  # 21
    "0000000000000000000000000000000000000000001000000000000000000000",  # 22
    "0000000000000000000000000000000000000000010000000000000000000000",  # 23
    "0000000000000000000000000000000000000000100000000000000000000000",  # 24
    "0000000000000000000000000000000000000001000000000000000000000000",  # 25
    "0000000000000000000000000000000000000010000000000000000000000000",  # 26
    "0000000000000000000000000000000000000100000000000000000000000000",  # 27
    "0000000000000000000000000000000000001000000000000000000000000000",  # 28
    "0000000000000000000000000000000000010000000000000000000000000000",
    "0000000000000000000000000000000000100000000000000000000000000000",
    "0000000000000000000000000000000001000000000000000000000000000000",
    "0000000000000000000000000000000010000000000000000000000000000000",
    "0000000000000000000000000000000100000000000000000000000000000000",
    "0000000000000000000000000000001000000000000000000000000000000000",
    "0000000000000000000000000000010000000000000000000000000000000000",
    "0000000000000000000000000000100000000000000000000000000000000000",
    "0000000000000000000000000001000000000000000000000000000000000000",
    "0000000000000000000000000010000000000000000000000000000000000000",
    "0000000000000000000000000100000000000000000000000000000000000000",
    "0000000000000000000000001000000000000000000000000000000000000000",
    "0000000000000000000000010000000000000000000000000000000000000000",
    "0000000000000000000000100000000000000000000000000000000000000000",
    "0000000000000000000001000000000000000000000000000000000000000000",
    "0000000000000000000010000000000000000000000000000000000000000000",
    "0000000000000000000100000000000000000000000000000000000000000000",
    "0000000000000000001000000000000000000000000000000000000000000000",
    "0000000000000000010000000000000000000000000000000000000000000000",
    "0000000000000000100000000000000000000000000000000000000000000000",
    "0000000000000001000000000000000000000000000000000000000000000000",
    "0000000000000010000000000000000000000000000000000000000000000000",
    "0000000000000100000000000000000000000000000000000000000000000000",
    "0000000000001000000000000000000000000000000000000000000000000000",
    "0000000000010000000000000000000000000000000000000000000000000000",
    "0000000000100000000000000000000000000000000000000000000000000000",
    "0000000001000000000000000000000000000000000000000000000000000000",
    "0000000010000000000000000000000000000000000000000000000000000000",
    "0000000100000000000000000000000000000000000000000000000000000000",
    "0000001000000000000000000000000000000000000000000000000000000000",
    "0000010000000000000000000000000000000000000000000000000000000000",
    "0000100000000000000000000000000000000000000000000000000000000000",
    "0001000000000000000000000000000000000000000000000000000000000000",
    "0010000000000000000000000000000000000000000000000000000000000000",
    "0100000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000",
]


class TestSequenceFunctions_FlatTree(unittest.TestCase):

    def setUp(self):
        self.tree = hamDb.BkHammingTree()
        # for x in range(4):
        #     with self.tree.writer_context():
        #         self.tree.dropTree()
        #         self.buildTestTree()
        self.tree.dropTree()
        self.buildTestTree()

    def buildTestTree(self):
        self.tree = hamDb.BkHammingTree()
        for nodeId, node_hash in enumerate(TEST_DATA_FLAT):
            print("Inserting node id: ", nodeId, "hash", node_hash, "value: ", b2i(node_hash))
            node_hash = b2i(node_hash)
            self.tree.unlocked_insert(node_hash, nodeId)

    def test_1(self):
        tgtHash = "0000000000000000000000000000000000000000000000000000000000000001"
        tgtHash = b2i(tgtHash)
        ret = self.tree.getWithinDistance(tgtHash, 0)
        self.assertEqual(ret, set((1,)))

    def test_2(self):
        tgtHash = "0000000000000000000000000000000000000000001111111111111111111111"
        tgtHash = b2i(tgtHash)
        ret = self.tree.getWithinDistance(tgtHash, 0)
        self.assertEqual(ret, set((22,)))

    def test_3(self):
        tgtHash = "1111111111111111111111111111111111111111111111111111111111111111"
        tgtHash = b2i(tgtHash)
        ret = self.tree.getWithinDistance(tgtHash, 0)
        self.assertEqual(ret, set((64,)))

    def test_iter(self):
        list_nodes = list(self.tree)
        self.assertEqual(list_nodes,
                         [(1, 1), (3, 2), (7, 3), (15, 4), (31, 5), (63, 6), (127, 7), (255, 8), (511, 9), (1023, 10),
                          (2047, 11), (4095, 12), (8191, 13), (16383, 14), (32767, 15), (65535, 16), (131071, 17),
                          (262143, 18), (524287, 19), (1048575, 20), (2097151, 21), (4194303, 22), (8388607, 23),
                          (16777215, 24), (33554431, 25), (67108863, 26), (134217727, 27), (268435455, 28),
                          (536870911, 29), (1073741823, 30), (2147483647, 31), (4294967295, 32), (8589934591, 33),
                          (17179869183, 34), (34359738367, 35), (68719476735, 36), (137438953471, 37),
                          (274877906943, 38), (549755813887, 39), (1099511627775, 40), (2199023255551, 41),
                          (4398046511103, 42), (8796093022207, 43), (17592186044415, 44), (35184372088831, 45),
                          (70368744177663, 46), (140737488355327, 47), (281474976710655, 48), (562949953421311, 49),
                          (1125899906842623, 50), (2251799813685247, 51), (4503599627370495, 52),
                          (9007199254740991, 53), (18014398509481983, 54), (36028797018963967, 55),
                          (72057594037927935, 56), (144115188075855871, 57), (288230376151711743, 58),
                          (576460752303423487, 59), (1152921504606846975, 60), (2305843009213693951, 61),
                          (4611686018427387903, 62), (9223372036854775807, 63), (-1, 64)])


class TestSequenceFunctions_TallTree(unittest.TestCase):

    def setUp(self):
        self.tree = hamDb.BkHammingTree()
        # for x in range(4):
        #     with self.tree.writer_context():
        self.tree.dropTree()
        self.buildTestTree()

    def buildTestTree(self):
        self.tree = hamDb.BkHammingTree()
        for nodeId, node_hash in enumerate(TEST_DATA_Narrow):
            print("Inserting node id: ", nodeId, "hash", node_hash, "value: ", b2i(node_hash))
            node_hash = b2i(node_hash)
            self.tree.insert(node_hash, nodeId)

    def test_1(self):
        tgtHash = "0000000000000000000000000000000000000000000000000000000000000001"
        tgtHash = b2i(tgtHash)
        ret = self.tree.getWithinDistance(tgtHash, 0)
        self.assertEqual(ret, set((1,)))

    def test_2(self):
        tgtHash = "0000000000000000000000000000000000000000001000000000000000000000"
        tgtHash = b2i(tgtHash)
        ret = self.tree.getWithinDistance(tgtHash, 0)
        self.assertEqual(ret, set((22,)))

    def test_3(self):
        tgtHash = "1000000000000000000000000000000000000000000000000000000000000000"
        tgtHash = b2i(tgtHash)
        ret = self.tree.getWithinDistance(tgtHash, 0)
        self.assertEqual(ret, set((64,)))
